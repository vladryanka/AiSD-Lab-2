#include <iostream>
#include <stdio.h>
#include <chrono>
#include <thread>

using namespace std;


int BinarySearch(int mas[], int find, int n)
{

	int left = 0;
	int right = n;
	int middle = 0; // middle of array. index
	bool answer = false;
	while (mas[middle] != find)
	{
		if (mas[middle] > find)
			right = middle;
		else
			left = middle;
		middle = (right + left) / 2;
		answer = true;
	}
	if (answer)
		cout << "Element has index = " << middle;
	else cout << "Incorrect data" << endl;
	return middle;
}

void QuickSearch(int mas1[], int unconstnum)
{
	auto start = chrono::high_resolution_clock::now();
	int index_of_main = 0;
	bool answer = true;
	while (answer == true)
	{
		for (int i = index_of_main + 1; i < unconstnum; i++)
		{
			int remember = mas1[i];
			if (mas1[i] <= mas1[index_of_main])
			{
				for (int j = i; j < unconstnum - 1; j++)
				{
					mas1[j] = mas1[j + 1];
				}
				for (int j = unconstnum - 1; j > index_of_main; j--)
				{
					mas1[j] = mas1[j - 1];
				}
				mas1[index_of_main] = remember;
				index_of_main++;
			}
		}
		answer = false;
		for (int i = 0; i < unconstnum - 1; i++)
		{
			for (int j = i; j < unconstnum; j++)
			{
				if (mas1[i] > mas1[j])
				{
					answer = true;
					index_of_main = i;
				}
			}
		}
	}
	
	this_thread::get_id();
	auto end = chrono::high_resolution_clock::now();
	chrono::duration<float> duration = end - start;
	cout <<unconstnum << " elements " << duration.count() << " sec" << endl;
	
}

void InsertionSort(int mas1[], int unconstnum)
{
	auto start = chrono::high_resolution_clock::now();
	int i = 0; int j;
	for (i = 1; i < unconstnum; i++)
		for (j = i; j > 0; j--) // пока j>0 и элемент j-1 > j, x-массив int
			if (mas1[j - 1] > mas1[j])
				swap(mas1[j - 1], mas1[j]);
			else break;
	this_thread::get_id();
	auto end = chrono::high_resolution_clock::now();
	chrono::duration<float> duration = end - start;
	cout << unconstnum << " elements " << duration.count() << " sec" << endl;
}

void BogoSort(int mas[], int n)
{
	bool answer = true;
	while (answer == true)
	{
		for (int i = 0; i < n; i++)
		{
			swap(mas[i], mas[(rand() % n)]);
		}
		answer = false;
		for (int i = 0; i < n - 1; i++)
		{
			if (mas[i] > mas[i + 1])
			{
				answer = true;
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << " ";
	}
}

void CountingSort(char maschar[], int n)
{
	int mascount[6];
	int end = n - 1;
	int i; int j;
	for (i = 0; i < n; i++)
	{
		mascount[i] = 1;
	}
	for (i = 0; i < n; i++)
	{
		for (j = i + 1; j < n; j++)
		{
			if (maschar[i] == maschar[j])
			{
				mascount[i] ++;
				int k = j;
				while (k != n - 1)
				{
					maschar[k] = maschar[k + 1];
					k++;
				}
				maschar[end] = 0;
				mascount[end] = 0;
				end--;
			}
		}
	}
	int count = 0;
	for (i = 0; i < n; i++)
	{
		if (mascount[i] != 0)
		{
			count++;
		}
	}
	for (i = 0; i <= end; i++)
		for (j = i; j > 0; j--) // пока j>0 и элемент j-1 > j, x-массив int
			if (maschar[j - 1] > maschar[j])
			{
				swap(maschar[j - 1], maschar[j]);
				swap(mascount[j - 1], mascount[j]);
			}
			else break;

	char newmas[6];
	j = 0;
	i = 0;
	while (j < count)
	{
		while (mascount[j] != 0)
		{
			newmas[i] = maschar[j];
			i++;
			mascount[j]--;
		}
		j++;
	}

	for (int i = 0; i < n; i++)
	{
		cout << newmas[i] << " ";
	}

}



int main()
{
	setlocale(LC_ALL, "Ru");
	const int n = 6;
	int mas[6] = {2, 4, 5,8,10, 23};
	cout << "BinarySearch\n Array: " << endl;
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << " ";
	}
	int find;
	cout << endl;
	cout << "Enter element of array you want to get" << endl;
	cin >> find;
	BinarySearch(mas, find, n);
	cout << endl;
	cout << "_____________" << endl << endl;
	const int num = 100000;
	int unconstnum = 10;
	int mas1[num];
	for (int i = 0; i < unconstnum; i++)
	{
		mas1[i] = rand() % 30;
	}
	cout << "QuickSearch\nArray: " << endl;
	for (int i = 0; i < unconstnum; i++)
	{
		cout << mas1[i] << " ";
	}
	cout << endl;
	QuickSearch(mas1, unconstnum);
	for (int i = 0; i < unconstnum; i++)
	{
		cout << mas1[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < n; i++)
	{
		mas1[i] = rand() % 30;
	}
	cout << endl;
	cout << "_____________" << endl << endl;
	cout << "InsertionSort\nArray: " << endl;
	for (int i = 0; i < n; i++)
	{
		cout << mas1[i] << " ";
	}
	cout << endl;
	InsertionSort(mas1, unconstnum);
	for (int i = 0; i < n; i++)
	{
		mas[i] = rand() % 30;
	}
	cout << endl;
	cout << "_____________" << endl << endl;
	cout << "BogoSort\nArray: " << endl;
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << " ";
	}
	cout << endl;
	BogoSort(mas, n);
	cout << "_____________" << endl << endl;
	char maschar[n] = { 'c','1','d','b','c','a' };
	cout << endl;
	cout << "CountingSort\nArray: " << endl;
	for (int i = 0; i < n; i++)
	{
		cout << maschar[i] << " ";
	}
	cout << endl;
	CountingSort(maschar, n);


	cout << "Running time of algorithms " << endl;

	/*cout << "QuickSearch" << endl;
	
	while (unconstnum != num)
	{
		for (int i = 0; i < unconstnum; i++)
		{
			mas1[i] = rand() % 30;
		}
		QuickSearch(mas1, unconstnum);
		memset(mas1, 0, sizeof(int) * unconstnum);
		unconstnum *= 10;
	}*/
	cout << endl<< "InsertionSort" << endl;
	unconstnum = 10;
	memset(mas1, 0, sizeof(int) * unconstnum);
	while (unconstnum != num*10)
	{
		for (int i = 0; i < unconstnum; i++)
		{
			mas1[i] = rand() % 30;
		}
		InsertionSort(mas1, unconstnum);
		memset(mas1, 0, sizeof(int) * unconstnum);
		unconstnum *= 10;
	}

	return 0;
}